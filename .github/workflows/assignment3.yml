name: assignment3
on:
  push

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log Start Execute
        if: always()
        run: |
          echo "Starting execute: " $(date) >> ${{ github.workspace }}/log.txt
          echo "Submitters: Nave Maor, Eran Yosefia " >> ${{ github.workspace }}/log.txt
      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          tags: assignment3:latest, ${{ secrets.DOCKER_COURSE_USERNAME }}/assignment3:latest
          outputs: type=docker,dest=/tmp/image.tar
      - name: Success Build
        if: success()
        run: |
          echo "image successfully built" >> ${{ github.workspace }}/log.txt
      - name: Failed Build
        if: failure()
        run: |
          echo "image not able to be built" >> ${{ github.workspace }}/log.txt
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: assignment3
          path: /tmp/image.tar
      - name: Upload Log File
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: LogFile
          path: ${{ github.workspace }}/log.txt
          
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
#    1. download image and run it in a container
    - name: Download artifact
      uses: actions/download-artifact@v3  # downloads all artifacts
    - name: Load Docker images from previous workflows
      run: docker load --input assignment3/image.tar
    - name: check assignment3 image is loaded
      run: docker image ls
    - name: run image in container
      run: docker run -p8000:8000 assignment3 &
    - name: Check container is running
      run: docker ps
#     2. set up python and pytest environment
    - name: Checkout
      uses: actions/checkout@v3
    - name: Download log.txt artifact
      uses: actions/download-artifact@v3
      with:
        name: LogFile
    - name: Success Run Container
      if: success()
      run: |
        echo "Container up and running" >> ${{ github.workspace }}/log.txt
    - name: Failed run container
      if: failure()
      run: |
        echo "Container failed to run" >> ${{ github.workspace }}/log.txt
    - name: Set up Python
      uses: actions/setup-python@v4
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install requests
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#      3. run pytest tests and check results
    - name: Test with pytest  # additionally use ruff or other lint checkers
      run: |
        cd tests
        python -m pytest -v assn3_tests.py > assn3_test_results.txt
    - name: upload test results
      if: always()  # always perform this step even if tests fail, to see results
      uses: actions/upload-artifact@v3
      with:
        name: GH_test_results
        path: tests/assn3_test_results.txt
    - name: Success tests
      if: success()
      run: |
        echo "Tests succeeded" >> ${{ github.workspace }}/log.txt
    - name: Failed tests
      if: failure()
      run: |
          echo "Tests failed" >> ${{ github.workspace }}/log.txt
#     The following steps will only execute if tests succeeded
    - name: Set DATE
      run: echo "DATE=$(date -I)" >> $GITHUB_ENV
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_COURSE_USERNAME }}
        password: ${{ secrets.DOCKER_COURSE_PASSWORD }}
    - name: push image with "latest" and date tags to DH
      run: |
        docker push ${{ secrets.DOCKER_COURSE_USERNAME }}/assignment3
        docker tag ${{ secrets.DOCKER_COURSE_USERNAME }}/assignment3 \
        ${{ secrets.DOCKER_COURSE_USERNAME }}/assignment3:${{ env.DATE }}
        docker push \
        ${{ secrets.DOCKER_COURSE_USERNAME }}/assignment3:${{ env.DATE }}
    - name: Upload Log File
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: NewestLogfile
        path: ${{ github.workspace }}/log.txt
        
  query:
    needs: ["build", "test"]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3  # downloads all artifacts
      - name: Load Docker images from previous workflows
        run: docker load --input assignment3/image.tar
      - name: check assignment3 image is loaded
        run: docker image ls
      - name: run image in container
        run: docker run -p8000:8000 assignment3 &
      - name: Check container is running
        run: docker ps
  #     2. set up python and pytest environment
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install requests
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: run query functions
        run: |
          cd tests
          python query_functions.py
      - name: Upload response.txt
        if: always()
        uses: actions/upload-artifact@v3
        with:
            name: response
            path: ${{ github.workspace }}/tests/response.txt
